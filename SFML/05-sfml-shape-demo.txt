Shape.cpp

#include "Shape.h"

sf::CircleShape draw_circle(float radius, float x, float y, int R, int G, int B)
{
	sf::CircleShape circle(radius); // Insert radius
	// set the shape color to green
	circle.setFillColor(sf::Color(R, G, B)); // standard RGB colour scheme; Brown
	circle.setPosition(x, y);
	circle.setOutlineThickness(5.f);
	circle.setOutlineColor(sf::Color::White);

	return circle;
}

sf::CircleShape draw_ellipse(float radius, float x, float y, int R, int G, int B)
{
	sf::CircleShape ellipse(radius);

	ellipse.setScale(2, 1); // Horizontal, Vertical scaling
	ellipse.setPosition(x, y);
	ellipse.setFillColor(sf::Color(R, G, B));
	ellipse.setOutlineThickness(5.f);
	ellipse.setOutlineColor(sf::Color::White);

	return ellipse;
}

sf::RectangleShape draw_rect(float length, float height, float x, float y, int R, int G, int B)
{
	sf::RectangleShape rectangle(sf::Vector2f(length, height)); // Insert length, width
	rectangle.setFillColor(sf::Color(R, G, B));
	rectangle.setPosition(x, y);
	rectangle.setOutlineThickness(5.f);
	rectangle.setOutlineColor(sf::Color::White);

	return rectangle;
}

sf::CircleShape draw_tri(float sides, int num_of_sides, float x, float y, int R, int G, int B)
{
	/*
		a polygon shape takes reference from sf::Shape
	*/
	sf::CircleShape triangle(sides, num_of_sides); // Insert side, num of sides
	triangle.setFillColor(sf::Color(R, G, B));
	triangle.setOutlineThickness(5.f);
	triangle.setOutlineColor(sf::Color::White);
	triangle.setPosition(x, y);

	return triangle;
}

sf::ConvexShape draw_convex(float x, float y, int R, int G, int B)
{
	sf::ConvexShape convex; // Creating an empty shape
	convex.setPointCount(5); // num of sides/points
	// define the points
	// Must be either clockwise or anti-clockwise defined
	convex.setPoint(0, sf::Vector2f(0.f, 0.f));
	convex.setPoint(1, sf::Vector2f(150.f, 10.f));
	convex.setPoint(2, sf::Vector2f(120.f, 90.f));
	convex.setPoint(3, sf::Vector2f(30.f, 100.f));
	convex.setPoint(4, sf::Vector2f(0.f, 50.f));

	convex.setFillColor(sf::Color(R, G, B)); // Orange
	convex.setOutlineThickness(5.f);
	convex.setOutlineColor(sf::Color::White); // Darker orange
	convex.setPosition(x, y);

	return convex;
}

sf::RectangleShape draw_line(float length, float thickness, float x, float y)
{
	sf::RectangleShape line(sf::Vector2f(length, thickness)); // See this as a thinned out rectangle
	line.rotate(45.f); // Rotate by 45 degree
	line.setPosition(x, y); // Set positon of line
	line.setOutlineColor(sf::Color::White); // Darker orange
	line.setPosition(x, y);

	return line;
}

void display_shapes()
{
	sf::RenderWindow window(sf::VideoMode(1000, 1000), "Demo Window");

	window.setFramerateLimit(60);
	window.setPosition(sf::Vector2i(1000, 0));
	window.clear(sf::Color::Black);
	window.display();

	while (window.isOpen())
	{
		sf::Event evnt;
		while (window.pollEvent(evnt))
		{
			if (evnt.type == sf::Event::Closed)
			{
				window.close();
			}
		}
		window.clear(sf::Color::Black);
		window.draw(draw_circle(100.f, 10.f, 10.f, 204, 0, 0));
		window.draw(draw_ellipse(100.f, 10.f, 300.f, 102, 204, 0));
		window.draw(draw_rect(100.f, 50.f, 300.f, 300.f, 0, 255, 255));
		window.draw(draw_tri(80.f, 3, 300.f, 10.f, 204, 0, 204));
		window.draw(draw_convex(10.f, 600.f, 178, 102, 255));
		window.draw(draw_line(100.f, (float)0.1, 600.f, 600.f));
		window.display();
	}
}


void display_magic()
{
	sf::RenderWindow window(sf::VideoMode(1000, 1000), "Magic");

	window.setFramerateLimit(60);
	window.setPosition(sf::Vector2i(0, 0));
	window.clear(sf::Color::Black);
	window.display();

	int R = 255, G = 0, B = 0, count = 0;
	float x = 0.f, y = 0.f; // increase by 100
	/*
		bool values. If move_left is True, we move left. If move_right is True, we move right.
	*/
	bool move_left = 0, move_right = 1;

	while (window.isOpen())
	{
		sf::Event evnt;
		while (window.pollEvent(evnt))
		{
			if (evnt.type == sf::Event::Closed)
			{
				window.close();
			}
		}

		// There are only 100 sq spaces available.
		// Once limit is hit, we reset count.
		if (count == 100) { count = 0; }
		
		if (count < 100 && move_right == 1)
		{
			// If square hits the right corner, we stop moving right
			if (x < 900.f)
			{
				x += 100.f;
			}
			// And we start to move left
			else if (x == 900.f)
			{
				move_right = 0;
				move_left = 1;
				y += 100.f;
			}
		}
		
		else if (count < 100 && move_left == 1)
		{
			// If square hits right corner, we stop moving left
			if (x > 0.f)
			{
				x -= 100.f;
			}
			// And we start moving right
			else if (x == 0.f)
			{
				move_right = 1;
				move_left = 0;
				y += 100.f;
			}
		}

		if (count < 100 && y == 1000.f)
		{
			x = 0.f;
			y = 0.f;
		}

		switch ((int)x) 
		{
		case 0:
			R = 255; G = 0; B = 0; break;		// Red
		case 1:
			R = 255; G = 128; B = 0; break;		// Orange
		case 2:
			R = 255; G = 255; B = 0; break;		// Yellow
		case 300:
			R = 128; G = 255; B = 0; break;		// Light-Green
		case 400:
			R = 0; G = 255; B = 0;	 break;		// Green
		case 500:
			R = 0; G = 255; B = 128; break;		// Bluish-Green
		case 600:
			R = 0; G = 255; B = 255; break;		// Turquoise
		case 700:
			R = 0; G = 128; B = 255; break;		// Light-Blue
		case 800:
			R = 0; G = 0; B = 255; break;		// Blue
		case 900:
			R = 127; G = 0; B = 255; break;		// Violet
		default:
			break;
		}

		window.clear(sf::Color::Black);
		window.draw(draw_rect(100.f, 100.f, x, y, R, G, B)); // Wrapper function fo sf::Rect
		window.display();

		count++; // Count increament int every loop

		std::this_thread::sleep_for(std::chrono::milliseconds(50)); // Pause while loop for 50ms so we can see the change
	}
}


Shape.h
#include <SFML/Graphics.hpp>
#include <chrono>
#include <thread>
#include <iostream>

void display_shapes();
void display_magic();

main.cpp
#include "Shape.h"

int main()
{
	display_magic();
	return 0;
}